generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(uuid())
  email                String         @unique
  name                 String?
  password             String?
  role                 Role           @default(USER)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  address              String?
  googleId             String?        @unique
  phone                String?
  resetPasswordExpires DateTime?
  resetPasswordToken   String?
  cartItems            CartItem[]
  notifications        Notification[]
  orders               Order[]
  reviews              Review[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id            String           @id @default(uuid())
  name          String
  slug          String           @unique
  description   String
  price         Float
  originalPrice Float?
  images        String[]
  categoryId    String
  featured      Boolean          @default(false)
  rating        Float            @default(0)
  reviewCount   Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  category      Category         @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[]
  reviews       Review[]
}

model ProductVariant {
  id        String   @id @default(uuid())
  productId String
  color     String
  size      String
  stock     Int      @default(0)
  sku       String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, color, size])
  @@index([productId])
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  total           Float
  status          OrderStatus @default(PENDING)
  shippingAddress String?
  paymentMethod   String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  reviews         Review[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String
  color     String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([orderId, productId])
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  size      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, size, color])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(ORDER)
  isRead    Boolean          @default(false)
  orderId   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
  SUPPORT
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum NotificationType {
  ORDER
  SYSTEM
  PROMOTION
}
